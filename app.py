import json
import os
import pandas as pd
import sys
import psutil
from flask import Flask, request, render_template, redirect, url_for, session
from recommendations import generate_recommendations

app = Flask(__name__)
app.secret_key = "supersecretkey"
UPLOAD_FOLDER = 'uploads'
RULES_FILE = "rules.json"
os.makedirs(UPLOAD_FOLDER, exist_ok=True)

# üìå Eƒüer PyInstaller ile √ßalƒ±≈üƒ±yorsak, doƒüru dizini bul
if getattr(sys, 'frozen', False):
    application_path = sys._MEIPASS
else:
    application_path = os.getcwd()

KATALOG_DOSYA = "Kategoriler.csv"  # Hep dƒ±≈üarƒ±daki g√ºncel dosyayƒ± kullan



# üìå √úr√ºn kataloƒüunu oku veya bo≈ü set olu≈ütur
if os.path.exists(KATALOG_DOSYA):
    katalog_df = pd.read_csv(KATALOG_DOSYA, encoding="utf-8", sep=";", low_memory=False)
    if "√úr√ºn Tanƒ±m" in katalog_df.columns:
        urun_katalogu = set(katalog_df["√úr√ºn Tanƒ±m"].astype(str).str.strip())
    else:
        urun_katalogu = set()
else:
    urun_katalogu = set()

def load_rules():
    with open(RULES_FILE, "r", encoding="utf-8") as file:
        return json.load(file)

def save_rules(rules):
    with open(RULES_FILE, "w", encoding="utf-8") as file:
        json.dump(rules, file, indent=4, ensure_ascii=False)

def detect_and_extract_columns(file_path):
    """CSV dosyasƒ±ndaki 'Malzeme Grubu' ve 'Net Satƒ±≈ü Miktarƒ±' s√ºtunlarƒ±nƒ± otomatik bulur ve temizler."""
    df = pd.read_csv(file_path, encoding="utf-8", sep=";", low_memory=False, header=None)

    malzeme_sutun = None
    satis_sutun = None
    data_start_row = None

    malzeme_keywords = ["malzeme grubu", "√ºr√ºn grubu", "malzeme adƒ±"]
    satis_keywords = ["net satƒ±≈ü miktarƒ±", "satƒ±≈ü miktar", "toplam satƒ±≈ü"]

    for i in range(50):  # ƒ∞lk 50 satƒ±rƒ± tarayarak ba≈ülƒ±ƒüƒ± bul
        row_values = df.iloc[i].astype(str).str.lower()
        for keyword in malzeme_keywords:
            if keyword in row_values.values:
                malzeme_sutun = row_values[row_values == keyword].index[0]
        for keyword in satis_keywords:
            if keyword in row_values.values:
                satis_sutun = row_values[row_values == keyword].index[0]
        if malzeme_sutun is not None and satis_sutun is not None:
            data_start_row = i
            break

    if malzeme_sutun is None or satis_sutun is None or data_start_row is None:
        raise ValueError("Malzeme Grubu veya Net Satƒ±≈ü Miktarƒ± s√ºtunu bulunamadƒ±!")

    df_cleaned = df.iloc[data_start_row + 1:, [malzeme_sutun, satis_sutun]]
    df_cleaned.columns = ["Malzeme Grubu", "Net Satƒ±≈ü Miktarƒ±"]
    df_cleaned = df_cleaned.dropna()
    
    # üîπ Ondalƒ±klƒ± sayƒ±larƒ± d√ºzelt (√∂nce virg√ºl√º noktaya √ßevir, sonra sayƒ±ya d√∂n√º≈üt√ºr)
    df_cleaned["Net Satƒ±≈ü Miktarƒ±"] = df_cleaned["Net Satƒ±≈ü Miktarƒ±"].astype(str).str.replace(",", ".", regex=False)
    df_cleaned["Net Satƒ±≈ü Miktarƒ±"] = pd.to_numeric(df_cleaned["Net Satƒ±≈ü Miktarƒ±"], errors='coerce')
    
    return df_cleaned

def generate_recommendations(df):
    """Kullanƒ±cƒ±nƒ±n belirlediƒüi kriterlere g√∂re gruplandƒ±rƒ±lmƒ±≈ü satƒ±≈ülarƒ± analiz eder."""
    rules = load_rules()
    recommendations = []

    # üîπ Aynƒ± √ºr√ºn isimlerini olduƒüu gibi tutarak gruplandƒ±r ve toplam satƒ±≈ülarƒ± hesapla
    grouped_df = df.groupby("Malzeme Grubu", as_index=False).sum()
    print("‚úÖ Toplam Satƒ±≈ülar:")
    print(grouped_df)

    for rule in rules:
        keyword = rule["keyword"].strip()
        threshold = rule["threshold"]
        message = rule["message"]
        
        # üîπ str.contains() regex olmadan filtreleme yap
        filtered_df = grouped_df[grouped_df["Malzeme Grubu"].str.contains(keyword, case=False, na=False, regex=False)]
        total_sales = filtered_df["Net Satƒ±≈ü Miktarƒ±"].sum()
        print(f"üîç '{keyword}' i√ßin toplam satƒ±≈ü: {total_sales}")
        
        if total_sales > 0 and total_sales < threshold:
            recommendations.append(f"üîπ '{keyword}' i√ßeren √ºr√ºnlerin toplam satƒ±≈üƒ± ({total_sales}) e≈üik deƒüerinin altƒ±nda ({threshold}). {message}")
    
    return "<br>".join(recommendations) if recommendations else "‚úÖ T√ºm √ºr√ºnler yeterince satƒ±lmƒ±≈ü g√∂r√ºn√ºyor!"

@app.route("/", methods=["GET", "POST"])
def upload_file():
    recommendations_html = None
    table_html = None
    missing_products_html = None

    if request.method == "POST" and 'file' in request.files:
        file = request.files['file']
        if file:
            file_path = os.path.join(UPLOAD_FOLDER, file.filename)
            file.save(file_path)
            try:
                df_cleaned = detect_and_extract_columns(file_path)
                session['data'] = df_cleaned.to_dict(orient="records")
                recommendations_html = generate_recommendations(df_cleaned)
                table_html = df_cleaned.to_html(classes='table table-striped', index=False)

                if urun_katalogu:
                     satilan_urunler = set(df_cleaned["Malzeme Grubu"].astype(str).str.strip().str.lower())
                     eksik_urunler = urun_katalogu - satilan_urunler
                     missing_products_html = "<br>".join(sorted(eksik_urunler)) if eksik_urunler else "‚úÖ T√ºm √ºr√ºnler satƒ±lmƒ±≈ü!"
                else:
                     missing_products_html = "‚ö†Ô∏è √úr√ºn kataloƒüu y√ºklenmediƒüi i√ßin eksik √ºr√ºnler hesaplanamƒ±yor."
            except Exception as e:
                return f"Hata olu≈ütu:<br><pre>{str(e)}</pre>"
    return render_template("index.html", recommendations=recommendations_html, table=table_html, missing_products=missing_products_html)

@app.route("/admin", methods=["GET", "POST"])
def admin_panel():
    rules = load_rules()
    if request.method == "POST":
        action = request.form.get("action")
        if action == "add":
            keyword = request.form.get("keyword").strip()
            threshold = int(request.form.get("threshold"))
            message = request.form.get("message")
            rules.append({"keyword": keyword, "threshold": threshold, "message": message})
            save_rules(rules)
        elif action == "delete":
            index = int(request.form.get("index"))
            if 0 <= index < len(rules):
                del rules[index]
                save_rules(rules)
        return redirect(url_for("admin_panel"))
    return render_template("admin.html", rules=rules)

if __name__ == "__main__":
    app.run(debug=True)